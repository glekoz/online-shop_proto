// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GRPCProduct_Create_FullMethodName = "/GRPCProduct/Create"
	GRPCProduct_Get_FullMethodName    = "/GRPCProduct/Get"
)

// GRPCProductClient is the client API for GRPCProduct service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCProductClient interface {
	Create(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ID, error)
	Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Product, error)
}

type gRPCProductClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCProductClient(cc grpc.ClientConnInterface) GRPCProductClient {
	return &gRPCProductClient{cc}
}

func (c *gRPCProductClient) Create(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ID)
	err := c.cc.Invoke(ctx, GRPCProduct_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCProductClient) Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, GRPCProduct_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCProductServer is the server API for GRPCProduct service.
// All implementations must embed UnimplementedGRPCProductServer
// for forward compatibility.
type GRPCProductServer interface {
	Create(context.Context, *Product) (*ID, error)
	Get(context.Context, *ID) (*Product, error)
	mustEmbedUnimplementedGRPCProductServer()
}

// UnimplementedGRPCProductServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGRPCProductServer struct{}

func (UnimplementedGRPCProductServer) Create(context.Context, *Product) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGRPCProductServer) Get(context.Context, *ID) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGRPCProductServer) mustEmbedUnimplementedGRPCProductServer() {}
func (UnimplementedGRPCProductServer) testEmbeddedByValue()                     {}

// UnsafeGRPCProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCProductServer will
// result in compilation errors.
type UnsafeGRPCProductServer interface {
	mustEmbedUnimplementedGRPCProductServer()
}

func RegisterGRPCProductServer(s grpc.ServiceRegistrar, srv GRPCProductServer) {
	// If the following call pancis, it indicates UnimplementedGRPCProductServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GRPCProduct_ServiceDesc, srv)
}

func _GRPCProduct_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCProductServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCProduct_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCProductServer).Create(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCProduct_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCProductServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCProduct_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCProductServer).Get(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCProduct_ServiceDesc is the grpc.ServiceDesc for GRPCProduct service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCProduct_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GRPCProduct",
	HandlerType: (*GRPCProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GRPCProduct_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GRPCProduct_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
