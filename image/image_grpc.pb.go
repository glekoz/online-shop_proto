// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: image.proto

package protoimage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Image_CreateEntity_FullMethodName  = "/Image/CreateEntity"
	Image_DeleteEntity_FullMethodName  = "/Image/DeleteEntity"
	Image_IsStatusFree_FullMethodName  = "/Image/IsStatusFree"
	Image_UploadImage_FullMethodName   = "/Image/UploadImage"
	Image_DeleteImage_FullMethodName   = "/Image/DeleteImage"
	Image_GetCoverImage_FullMethodName = "/Image/GetCoverImage"
	Image_GetImageList_FullMethodName  = "/Image/GetImageList"
)

// ImageClient is the client API for Image service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageClient interface {
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	DeleteEntity(ctx context.Context, in *CommonMetadata, opts ...grpc.CallOption) (*BoolResponse, error)
	IsStatusFree(ctx context.Context, in *CommonMetadata, opts ...grpc.CallOption) (*BoolResponse, error)
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UploadImageRequest, UploadImageResponse], error)
	DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error)
	GetCoverImage(ctx context.Context, in *CommonMetadata, opts ...grpc.CallOption) (*GetCoverImageResponse, error)
	GetImageList(ctx context.Context, in *CommonMetadata, opts ...grpc.CallOption) (*GetImageListResponse, error)
}

type imageClient struct {
	cc grpc.ClientConnInterface
}

func NewImageClient(cc grpc.ClientConnInterface) ImageClient {
	return &imageClient{cc}
}

func (c *imageClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, Image_CreateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) DeleteEntity(ctx context.Context, in *CommonMetadata, opts ...grpc.CallOption) (*BoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, Image_DeleteEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) IsStatusFree(ctx context.Context, in *CommonMetadata, opts ...grpc.CallOption) (*BoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, Image_IsStatusFree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UploadImageRequest, UploadImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Image_ServiceDesc.Streams[0], Image_UploadImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadImageRequest, UploadImageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Image_UploadImageClient = grpc.BidiStreamingClient[UploadImageRequest, UploadImageResponse]

func (c *imageClient) DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteImageResponse)
	err := c.cc.Invoke(ctx, Image_DeleteImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) GetCoverImage(ctx context.Context, in *CommonMetadata, opts ...grpc.CallOption) (*GetCoverImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoverImageResponse)
	err := c.cc.Invoke(ctx, Image_GetCoverImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) GetImageList(ctx context.Context, in *CommonMetadata, opts ...grpc.CallOption) (*GetImageListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImageListResponse)
	err := c.cc.Invoke(ctx, Image_GetImageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServer is the server API for Image service.
// All implementations must embed UnimplementedImageServer
// for forward compatibility.
type ImageServer interface {
	CreateEntity(context.Context, *CreateEntityRequest) (*BoolResponse, error)
	DeleteEntity(context.Context, *CommonMetadata) (*BoolResponse, error)
	IsStatusFree(context.Context, *CommonMetadata) (*BoolResponse, error)
	UploadImage(grpc.BidiStreamingServer[UploadImageRequest, UploadImageResponse]) error
	DeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error)
	GetCoverImage(context.Context, *CommonMetadata) (*GetCoverImageResponse, error)
	GetImageList(context.Context, *CommonMetadata) (*GetImageListResponse, error)
	mustEmbedUnimplementedImageServer()
}

// UnimplementedImageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageServer struct{}

func (UnimplementedImageServer) CreateEntity(context.Context, *CreateEntityRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedImageServer) DeleteEntity(context.Context, *CommonMetadata) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedImageServer) IsStatusFree(context.Context, *CommonMetadata) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsStatusFree not implemented")
}
func (UnimplementedImageServer) UploadImage(grpc.BidiStreamingServer[UploadImageRequest, UploadImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImageServer) DeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedImageServer) GetCoverImage(context.Context, *CommonMetadata) (*GetCoverImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoverImage not implemented")
}
func (UnimplementedImageServer) GetImageList(context.Context, *CommonMetadata) (*GetImageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageList not implemented")
}
func (UnimplementedImageServer) mustEmbedUnimplementedImageServer() {}
func (UnimplementedImageServer) testEmbeddedByValue()               {}

// UnsafeImageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServer will
// result in compilation errors.
type UnsafeImageServer interface {
	mustEmbedUnimplementedImageServer()
}

func RegisterImageServer(s grpc.ServiceRegistrar, srv ImageServer) {
	// If the following call pancis, it indicates UnimplementedImageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Image_ServiceDesc, srv)
}

func _Image_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Image_CreateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Image_DeleteEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).DeleteEntity(ctx, req.(*CommonMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_IsStatusFree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).IsStatusFree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Image_IsStatusFree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).IsStatusFree(ctx, req.(*CommonMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServer).UploadImage(&grpc.GenericServerStream[UploadImageRequest, UploadImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Image_UploadImageServer = grpc.BidiStreamingServer[UploadImageRequest, UploadImageResponse]

func _Image_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Image_DeleteImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).DeleteImage(ctx, req.(*DeleteImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_GetCoverImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).GetCoverImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Image_GetCoverImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).GetCoverImage(ctx, req.(*CommonMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_GetImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).GetImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Image_GetImageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).GetImageList(ctx, req.(*CommonMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

// Image_ServiceDesc is the grpc.ServiceDesc for Image service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Image_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Image",
	HandlerType: (*ImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntity",
			Handler:    _Image_CreateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _Image_DeleteEntity_Handler,
		},
		{
			MethodName: "IsStatusFree",
			Handler:    _Image_IsStatusFree_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _Image_DeleteImage_Handler,
		},
		{
			MethodName: "GetCoverImage",
			Handler:    _Image_GetCoverImage_Handler,
		},
		{
			MethodName: "GetImageList",
			Handler:    _Image_GetImageList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _Image_UploadImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "image.proto",
}
